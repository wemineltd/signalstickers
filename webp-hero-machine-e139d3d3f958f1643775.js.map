{"version":3,"sources":["webpack:///./node_modules/webp-hero/dist/load-binary-data.js","webpack:///./node_modules/webp-hero/dist/webp-machine.js"],"names":["LoadingError","Error","WebpMachineError","defaultDetectWebpImage","image","test","src","webp","webpSupport","detectWebpImage","this","busy","cache","webpData","Promise","resolve","requestAnimationFrame","canvas","document","createElement","setCanvas","webpToSdl","length","toDataURL","error","name","message","async","url","reject","xhr","XMLHttpRequest","open","responseType","handleError","status","onerror","onreadystatechange","readyState","Uint8Array","response","send","loadBinaryData","pngData","decode","window","Array","from","querySelectorAll","polyfillImage"],"mappings":"mQAAO,MAAMA,UAAqBC,O,aCI3B,MAAMC,UAAyBD,OAE/B,MAAME,EAA0BC,GAAU,aAAaC,KAAKD,EAAME,KAMlE,MAAM,EACT,aAAY,KAAEC,EAAO,IAAI,OAAM,YAAEC,EAAc,cAAmB,gBAAEC,EAAkBN,GAA2B,IAC7GO,KAAKC,MAAO,EACZD,KAAKE,MAAQ,GACbF,KAAKH,KAAOA,EACZG,KAAKF,YAAcA,EACnBE,KAAKD,gBAAkBA,EAK3B,aAAaI,GACT,GAAIH,KAAKC,KACL,MAAM,IAAIT,EAAiB,mCAC/BQ,KAAKC,MAAO,EACZ,UAxBY,IAAIG,QAAQC,GAAWC,sBAAsBD,IA0BrD,MAAME,EAASC,SAASC,cAAc,UAItC,OAHAT,KAAKH,KAAKa,UAAUH,GACpBP,KAAKH,KAAKc,UAAUR,EAAUA,EAASS,QACvCZ,KAAKC,MAAO,EACLM,EAAOM,YAElB,MAAOC,GAIH,MAHAd,KAAKC,MAAO,EACZa,EAAMC,KAAOvB,EAAiBuB,KAC9BD,EAAME,QAAU,gCAAgCF,EAAME,QAChDF,GAMd,oBAAoBpB,GAChB,SAAUM,KAAKF,YACX,OACJ,MAAM,IAAEF,GAAQF,EAChB,GAAIM,KAAKD,gBAAgBL,GAAQ,CAC7B,GAAIM,KAAKE,MAAMN,GAEX,YADAF,EAAME,IAAMI,KAAKE,MAAMN,IAG3B,IACI,MAAMO,QDrDfc,eAA8BC,GACjC,OAAO,IAAId,QAAQ,CAACC,EAASc,KACzB,MAAMC,EAAM,IAAIC,eAChBD,EAAIE,KAAK,MAAOJ,GAChBE,EAAIG,aAAe,cACnB,MAAMC,EAAc,KAChBL,EAAO,IAAI7B,EAAa,qCAAqC8B,EAAIK,iBAAiBP,QAEtFE,EAAIM,QAAUF,EACdJ,EAAIO,mBAAqB,KACC,GAAlBP,EAAIQ,aACc,KAAdR,EAAIK,OACJpB,EAAQ,IAAIwB,WAAWT,EAAIU,WAG3BN,MAIZJ,EAAIW,SCkC2BC,CAAepC,GAChCqC,QAAgBjC,KAAKkC,OAAO/B,GAClCT,EAAME,IAAMI,KAAKE,MAAMN,GAAOqC,EAElC,MAAOnB,GAGH,MAFAA,EAAMC,KAAOvB,EAAiBuB,KAC9BD,EAAME,QAAU,6BAA6BpB,OAASkB,EAAME,UACtDF,IAOlB,wBAAuB,SAAEN,EAAW2B,OAAO3B,UAAa,IACpD,SAAUR,KAAKF,YACX,OAAO,KACX,IAAK,MAAMJ,KAAS0C,MAAMC,KAAK7B,EAAS8B,iBAAiB,QACrD,UACUtC,KAAKuC,cAAc7C,GAE7B,MAAOoB,GAGH,MAFAA,EAAMC,KAAOvB,EAAiBuB,KAC9BD,EAAME,QAAU,uCAAuCtB,EAAME,SAASkB,IAChEA","file":"webp-hero-machine-e139d3d3f958f1643775.js","sourcesContent":["export class LoadingError extends Error {\n}\nexport async function loadBinaryData(url) {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.open(\"GET\", url);\n        xhr.responseType = \"arraybuffer\";\n        const handleError = () => {\n            reject(new LoadingError(`failed to load binary data, code \"${xhr.status}\" from \"${url}\"`));\n        };\n        xhr.onerror = handleError;\n        xhr.onreadystatechange = () => {\n            if (xhr.readyState == 4) {\n                if (xhr.status == 200) {\n                    resolve(new Uint8Array(xhr.response));\n                }\n                else {\n                    handleError();\n                }\n            }\n        };\n        xhr.send();\n    });\n}\n//# sourceMappingURL=load-binary-data.js.map","import { Webp } from \"../libwebp/dist/webp.js\";\nimport { loadBinaryData } from \"./load-binary-data.js\";\nimport { detectWebpSupport } from \"./detect-webp-support.js\";\nconst relax = () => new Promise(resolve => requestAnimationFrame(resolve));\nexport class WebpMachineError extends Error {\n}\nexport const defaultDetectWebpImage = (image) => /\\.webp.*$/i.test(image.src);\n/**\n * Webp Machine\n * - decode and polyfill webp images\n * - can only decode images one-at-a-time (otherwise will throw busy error)\n */\nexport class WebpMachine {\n    constructor({ webp = new Webp(), webpSupport = detectWebpSupport(), detectWebpImage = defaultDetectWebpImage } = {}) {\n        this.busy = false;\n        this.cache = {};\n        this.webp = webp;\n        this.webpSupport = webpSupport;\n        this.detectWebpImage = detectWebpImage;\n    }\n    /**\n     * Decode raw webp data into a png data url\n     */\n    async decode(webpData) {\n        if (this.busy)\n            throw new WebpMachineError(\"cannot decode when already busy\");\n        this.busy = true;\n        try {\n            await relax();\n            const canvas = document.createElement(\"canvas\");\n            this.webp.setCanvas(canvas);\n            this.webp.webpToSdl(webpData, webpData.length);\n            this.busy = false;\n            return canvas.toDataURL();\n        }\n        catch (error) {\n            this.busy = false;\n            error.name = WebpMachineError.name;\n            error.message = `failed to decode webp image: ${error.message}`;\n            throw error;\n        }\n    }\n    /**\n     * Polyfill the webp format on the given <img> element\n     */\n    async polyfillImage(image) {\n        if (await this.webpSupport)\n            return;\n        const { src } = image;\n        if (this.detectWebpImage(image)) {\n            if (this.cache[src]) {\n                image.src = this.cache[src];\n                return;\n            }\n            try {\n                const webpData = await loadBinaryData(src);\n                const pngData = await this.decode(webpData);\n                image.src = this.cache[src] = pngData;\n            }\n            catch (error) {\n                error.name = WebpMachineError.name;\n                error.message = `failed to polyfill image \"${src}\": ${error.message}`;\n                throw error;\n            }\n        }\n    }\n    /**\n     * Polyfill webp format on the entire web page\n     */\n    async polyfillDocument({ document = window.document } = {}) {\n        if (await this.webpSupport)\n            return null;\n        for (const image of Array.from(document.querySelectorAll(\"img\"))) {\n            try {\n                await this.polyfillImage(image);\n            }\n            catch (error) {\n                error.name = WebpMachineError.name;\n                error.message = `webp image polyfill failed for url \"${image.src}\": ${error}`;\n                throw error;\n            }\n        }\n    }\n}\n//# sourceMappingURL=webp-machine.js.map"],"sourceRoot":""}